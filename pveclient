#!/usr/bin/perl

package PVE::CLI::pveclient;

use strict;
use warnings;
use Cwd 'abs_path';
use lib '/usr/share/pve-client';
use lib '.';
use Data::Dumper;

use PVE::JSONSchema qw(register_standard_option get_standard_option);
use PVE::CLIHandler;

use PVE::APIClient::LWP;
use PVE::APIClient::Helpers;
use PVE::APIClient::Commands::config;
use PVE::APIClient::Commands::remote;
use PVE::APIClient::Commands::list;
use PVE::APIClient::Commands::lxc;
use PVE::APIClient::Commands::help;
use PVE::APIClient::Commands::start;

use JSON;

sub call_method {
    my ($remote, $path, $method, $params) = @_;

    die "missing API path\n" if !defined($path);

    my $info = PVE::APIClient::Helpers::lookup_api_method($path, $method);
    print Dumper($params);

    die "implement me";
}

use base qw(PVE::CLIHandler);

my $cmd = $ARGV[0];

if ($cmd && $cmd eq 'packagedepends') {
    # experimental code to print required perl packages
    my $packages = {};
    my $dir = Cwd::getcwd;

    foreach my $k (keys %INC) {
	my $file = abs_path($INC{$k});
	next if $file =~ m/^\Q$dir\E/;
	my $res = `dpkg -S '$file'`;
	if ($res && $res =~ m/^(\S+): $file$/) {
	    my $debian_package = $1;
	    $debian_package =~ s/:amd64$//;
	    $packages->{$debian_package} = 1;
	} else {
	    die "unable to find package for '$file'\n";
	}
    }
    print join("\n", sort(keys %$packages)) . "\n";

    exit(0);
}

my $path_properties = {};
my $path_returns = { type => 'null' };

# dynamically update schema definition for direct API call
# like: pveclient api <get|set|create|delete|help> <remote> <path>
if (my $info =  PVE::APIClient::Helpers::extract_path_info()) {
    $path_properties = $info->{parameters}->{properties};
    $path_returns = $info->{returns};
}

$path_properties->{remote} = get_standard_option('pveclient-remote-name');
$path_properties->{api_path} = {
    description => "API path.",
    type => 'string',
    completion => sub {
	my ($cmd, $pname, $cur, $args) = @_;
	return PVE::APIClient::Helpers::complete_api_path($cur);
    },
};

__PACKAGE__->register_method ({
    name => 'pveclient_get',
    path => 'pveclient_get',
    method => 'GET',
    description => "call API GET on <path>.",
    parameters => {
	additionalProperties => 0,
	properties => $path_properties,
    },
    returns => $path_returns,
    code => sub {
	my ($param) = @_;

	my $path = PVE::Tools::extract_param($param, 'api_path');
	my $remote = PVE::Tools::extract_param($param, 'remote');

	return call_method($remote, $path, 'GET', $param);
    }});

__PACKAGE__->register_method ({
    name => 'pveclient_set',
    path => 'pveclient_set',
    method => 'PUT',
    description => "call API PUT on <path>.",
    parameters => {
	additionalProperties => 0,
	properties => $path_properties,
    },
    returns => $path_returns,
    code => sub {
	my ($param) = @_;

	print Dumper($param);

	die "implement me";

    }});

__PACKAGE__->register_method ({
    name => 'pveclient_create',
    path => 'pveclient_create',
    method => 'PUSH',
    description => "call API PUSH on <path>.",
    parameters => {
	additionalProperties => 0,
	properties => $path_properties,
    },
    returns => $path_returns,
    code => sub {
	my ($param) = @_;

	print Dumper($param);

	die "implement me";

    }});

__PACKAGE__->register_method ({
    name => 'pveclient_delete',
    path => 'pveclient_delete',
    method => 'DELETE',
    description => "call API DELETE on <path>.",
    parameters => {
	additionalProperties => 0,
	properties => $path_properties,
    },
    returns => $path_returns,
    code => sub {
	my ($param) = @_;

	print Dumper($param);

	die "implement me";

    }});


our $cmddef = {
    config => $PVE::APIClient::Commands::config::cmddef,
    list => $PVE::APIClient::Commands::list::cmddef,
    lxc => $PVE::APIClient::Commands::lxc::cmddef,
    remote => $PVE::APIClient::Commands::remote::cmddef,
    
    start => $PVE::APIClient::Commands::start::cmddef,

    api => {
	get => [ __PACKAGE__, 'pveclient_get', ['remote', 'api_path']],
	set => [ __PACKAGE__, 'pveclient_set', ['remote', 'api_path']],
	create => [ __PACKAGE__, 'pveclient_create', ['remote', 'api_path']],
	delete => [ __PACKAGE__, 'pveclient_delete', ['remote', 'api_path']],
    }
};


__PACKAGE__->run_cli_handler();
